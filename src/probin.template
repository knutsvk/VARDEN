! This module stores the runtime parameters.  The probin_init() routine is
! used to initialize the runtime parameters

module probin_module

  use bl_types
  use bl_space

  implicit none

  private

  @@declarationsA@@

  ! other data that is not runtime overridden

  ! Keep track of the inputs file that was used to read in runtime
  ! parameters.  This filename will be written into the job_info file.
  character (len=128), save, public :: inputs_file_used = ""

  real(dp_t), save, public :: rho_bc(3,2)
  real(dp_t), save, public :: trac_bc(3,2)
  real(dp_t), save, public :: u_bc(3,2),v_bc(3,2),w_bc(3,2)

  ! This will be allocated and defined below
  logical   , public, allocatable, save :: nodal(:)
  logical   , public, allocatable, save :: pmask(:)
  real(dp_t), public, allocatable, save :: prob_hi(:)
  real(dp_t), public, allocatable, save :: prob_lo(:)

  integer, parameter, public :: MAX_ALLOWED_LEVS = 10

  integer, save, public   :: extrap_comp                                                

  @@namelist@@

  public probin_init, probin_close

contains

  subroutine probin_init()

    use parallel
    use bc_module
    use bl_IO_module
    use bl_prof_module
    use bl_error_module
    use bl_constants_module
    use cluster_module
    
    integer    :: narg, farg

    character(len=128) :: fname
    character(len=128) :: probin_env

    logical :: lexist
    logical :: need_inputs

    integer :: un, ierr

    narg = command_argument_count()


    need_inputs = .true.

    call get_environment_variable('PROBIN', probin_env, status = ierr)
    if ( need_inputs .AND. ierr == 0 ) then
       un = unit_new()
       open(unit=un, file = probin_env, status = 'old', action = 'read')
       read(unit=un, nml = probin)
       close(unit=un)
       need_inputs = .false.
       inputs_file_used = probin_env
    end if

    farg = 1
    if ( need_inputs .AND. narg >= 1 ) then
       call get_command_argument(farg, value = fname)
       inquire(file = fname, exist = lexist )
       if ( lexist ) then
          farg = farg + 1
          un = unit_new()
          open(unit=un, file = fname, status = 'old', action = 'read')
          read(unit=un, nml = probin)
          close(unit=un)
          need_inputs = .false.
          inputs_file_used = fname	
       end if
    end if

    inquire(file = 'inputs_varden', exist = lexist)
    if ( need_inputs .AND. lexist ) then
       un = unit_new()
       open(unit=un, file = 'inputs_varden', status = 'old', action = 'read')
       read(unit=un, nml = probin)
       close(unit=un)
       need_inputs = .false.
       inputs_file_used = "inputs_varden"
    end if

    do while ( farg <= narg )
       call get_command_argument(farg, value = fname)
       select case (fname)


       @@commandline@@

       case ('--')
          farg = farg + 1
          exit

       case default
          if ( parallel_IOProcessor() ) then
             write(*,*) 'UNKNOWN option = ', fname
          end if
          call bl_error("Unknown option")
       end select

       farg = farg + 1
    end do

    allocate(nodal(dim_in))
    nodal = .true.

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Need to specify regrid_int if max_levs > 1 and not 'fixed grids'
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    if (max_levs > 1) then
       if (fixed_grids == '' .and. regrid_int < 1) then
          call bl_error('regrid_int must be specified if max_levs > 1')
       else if (fixed_grids /= '' .and. regrid_int > 0) then
          call bl_warn('Note: regrid_int will be ignored')
       end if
    end if

 
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Make sure that the buffer width for tagging is atleast as big as
    ! the regrid interval
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    if (regrid_int > 0 .and. amr_buf_width < regrid_int) then
       if (parallel_IOProcessor()) then
          print *,"************************************************************************"
          print *,"WARNING: regrid_int > 0 but amr_buf_width < regrid_int"
          print *,"         setting amr_buf_width = regrid_int"
          print *,"************************************************************************"
       endif
       amr_buf_width = regrid_int
    endif

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Initialize prob_lo and prob_hi
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    allocate(prob_lo(dim_in))
    prob_lo(1) = prob_lo_x
    if (dim_in > 1) prob_lo(2) = prob_lo_y
    if (dim_in > 2) prob_lo(3) = prob_lo_z

    allocate(prob_hi(dim_in))
    prob_hi(1) = prob_hi_x
    if (dim_in > 1) prob_hi(2) = prob_hi_y
    if (dim_in > 2) prob_hi(3) = prob_hi_z
    
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Initialize Dirichlet BCs 
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    rho_bc(1,1) = rho_bcx_lo
    rho_bc(1,2) = rho_bcx_hi
    rho_bc(2,1) = rho_bcy_lo
    rho_bc(2,2) = rho_bcy_hi
    rho_bc(3,1) = rho_bcz_lo
    rho_bc(3,2) = rho_bcz_hi
    trac_bc(1,1) = trac_bcx_lo
    trac_bc(1,2) = trac_bcx_hi
    trac_bc(2,1) = trac_bcy_lo
    trac_bc(2,2) = trac_bcy_hi
    trac_bc(3,1) = trac_bcz_lo
    trac_bc(3,2) = trac_bcz_hi
    u_bc(1,1) = u_bcx_lo
    u_bc(1,2) = u_bcx_hi
    u_bc(2,1) = u_bcy_lo
    u_bc(2,2) = u_bcy_hi
    u_bc(3,1) = u_bcz_lo
    u_bc(3,2) = u_bcz_hi
    v_bc(1,1) = v_bcx_lo
    v_bc(1,2) = v_bcx_hi
    v_bc(2,1) = v_bcy_lo
    v_bc(2,2) = v_bcy_hi
    v_bc(3,1) = v_bcz_lo
    v_bc(3,2) = v_bcz_hi
    w_bc(1,1) = w_bcx_lo
    w_bc(1,2) = w_bcx_hi
    w_bc(2,1) = w_bcy_lo
    w_bc(2,2) = w_bcy_hi
    w_bc(3,1) = w_bcz_lo
    w_bc(3,2) = w_bcz_hi
    
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Initialize pmask
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    allocate(pmask(dim_in))
    pmask = .FALSE.
    if (bcx_lo .eq. PERIODIC .and. bcx_hi .eq. PERIODIC) then
       pmask(1) = .TRUE.
    end if
    if (bcy_lo .eq. PERIODIC .and. bcy_hi .eq. PERIODIC) then
       pmask(2) = .TRUE.
    end if
    if (dim_in .eq. 3 .and. bcz_lo .eq. PERIODIC .and. bcz_hi .eq. PERIODIC) then
       pmask(3) = .TRUE.
    end if

    
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Initialize min_eff
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    call cluster_set_min_eff(cluster_min_eff)
    call cluster_set_blocking_factor(cluster_blocking_factor)
    call cluster_set_minwidth(cluster_min_width)

  end subroutine probin_init

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  subroutine probin_close()

     deallocate(prob_hi)
     deallocate(prob_lo)
     deallocate(nodal)
     deallocate(pmask)

  end subroutine probin_close

end module probin_module

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

module runtime_util_module
  
  implicit none

contains

  subroutine runtime_pretty_print(unit)

    use bl_constants_module
    use bc_module
    use probin_module

    integer, intent(in) :: unit

    write (unit, *) "[*] indicates overridden default"

    @@printing@@

  end subroutine runtime_pretty_print

end module runtime_util_module

